name: Deploy to AWS EC2

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: melihemreguler/portfolio

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VITE_EMAILJS_PUBLIC_KEY=${{ secrets.VITE_EMAILJS_PUBLIC_KEY }}
          VITE_EMAILJS_SERVICE_ID=${{ secrets.VITE_EMAILJS_SERVICE_ID }}
          VITE_EMAILJS_TEMPLATE_ID=${{ secrets.VITE_EMAILJS_TEMPLATE_ID }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          echo "Starting automated deployment setup..."
          
          # Create project directory if not exists
          mkdir -p /home/ubuntu/portfolio
          cd /home/ubuntu/portfolio
          
          # Ensure web network exists (used by existing nginx-proxy)
          docker network create web 2>/dev/null || echo "Network 'web' already exists"
          
          # Download or update docker-compose.yml
          curl -o docker-compose.yml https://raw.githubusercontent.com/${{ github.repository }}/${{ github.ref_name }}/docker-compose.yml
          
          # Pull latest image
          echo "Pulling latest Docker image..."
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # Stop and remove old containers
          echo "Stopping existing containers..."
          docker compose down portfolio || true
          docker compose down portfolio-test || true
          
          # Check if this is first deployment or update
          if docker ps -a --format "table {{.Names}}" | grep -q "portfolio"; then
            echo "Updating existing deployment..."
          else
            echo "First time deployment detected..."
          fi
          
          # Start new container (using test profile for IP access)
          echo "Starting portfolio container..."
          docker compose --profile test up -d portfolio-test
          
          # Wait for container to be ready
          echo "Waiting for container to start..."
          sleep 10
          
          # Health check
          echo "Performing health check..."
          if docker ps | grep -q "portfolio-test"; then
            echo "Container is running successfully"
            CONTAINER_ID=$(docker ps -q --filter "name=portfolio-test")
            echo "Container ID: $CONTAINER_ID"
            echo "Application is accessible on port 3000"
          else
            echo "Container failed to start"
            echo "Checking logs..."
            docker compose logs --tail=20 portfolio-test
            exit 1
          fi
          
          # Show running containers
          echo "Current running containers:"
          docker ps
          
          # Show recent logs
          echo "Recent application logs:"
          docker compose logs --tail=20 portfolio-test
          
          # Clean up old images to save space
          echo "Cleaning up old Docker images..."
          docker image prune -f
          
          echo "Deployment completed successfully!"
