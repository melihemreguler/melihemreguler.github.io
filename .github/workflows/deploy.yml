name: Deploy to AWS EC2

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: melihemreguler/portfolio

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VITE_EMAILJS_PUBLIC_KEY=${{ secrets.VITE_EMAILJS_PUBLIC_KEY }}
          VITE_EMAILJS_SERVICE_ID=${{ secrets.VITE_EMAILJS_SERVICE_ID }}
          VITE_EMAILJS_TEMPLATE_ID=${{ secrets.VITE_EMAILJS_TEMPLATE_ID }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          echo "Starting deployment validation and setup..."
          
          # System telemetry (non-sensitive)
          echo "System Information:"
          echo "OS: $(uname -s -r)"
          echo "Uptime: $(uptime -p)"
          
          # Memory telemetry
          echo "Memory Usage:"
          free -h | awk 'NR==2{printf "• RAM: %s used / %s total (%.1f%%)\n", $3, $2, $3*100/$2}'
          
          # Disk telemetry  
          echo "Disk Usage:"
          df -h / | awk 'NR==2{printf "• Root: %s used / %s total (%s)\n", $3, $2, $5}'
          
          # Network validation
          echo "Network Validation:"
          if docker network ls | grep -q "web"; then
            echo "• 'web' network exists"
          else
            echo "• CRITICAL: 'web' network not found!"
            echo "• This indicates nginx-proxy infrastructure is not running"
            echo "• Deploy cannot continue without proper network setup"
            exit 1
          fi
          
          # Project directory setup
          echo "Project Setup:"
          mkdir -p /home/ubuntu/portfolio
          cd /home/ubuntu/portfolio
          echo "Project directory ready"
          
          # Download/update docker-compose.yml
          echo "Configuration Update:"
          curl -s -o docker-compose.yml https://raw.githubusercontent.com/${{ github.repository }}/${{ github.ref_name }}/docker-compose.yml
          if [ -f docker-compose.yml ]; then
            echo "docker-compose.yml updated"
          else
            echo "Failed to download docker-compose.yml"
            exit 1
          fi
          
          # Container deployment
          echo "Container Deployment:"
          
          # Pull latest image
          echo "• Pulling latest image..."
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # Stop and remove old container
          echo "• Stopping existing containers..."
          docker compose down || true
          
          # Start new container
          echo "• Starting production container..."
          docker compose up -d portfolio
          
          # Wait for container to be ready
          echo "• Waiting for container startup..."
          sleep 10
          
          # Container health validation
          echo "Health Check:"
          if docker ps | grep -q "portfolio-app"; then
            echo "Container 'portfolio-app' is running"
            CONTAINER_ID=$(docker ps -q --filter "name=portfolio-app")
            echo "• Container ID: ${CONTAINER_ID:0:12}..."
            
            # Check container resource usage
            echo "Container Resources:"
            docker stats --no-stream --format "• CPU: {{.CPUPerc}} | Memory: {{.MemUsage}}" portfolio-app 2>/dev/null || echo "• Resource stats unavailable"
          else
            echo "Container 'portfolio-app' failed to start"
            echo "Container logs:"
            docker compose logs --tail=20 portfolio
            exit 1
          fi
          
          # Clean up old images
          echo "Cleanup:"
          echo "• Removing unused images..."
          PRUNED=$(docker image prune -f --filter="until=24h" 2>/dev/null | grep "Total reclaimed space" || echo "• No images to prune")
          echo "$PRUNED"
          
          # Final status
          echo "Final Status:"
          echo "• Running containers:"
          docker ps --format "  - {{.Names}}: {{.Status}}" | grep portfolio
          
          echo "Deployment completed successfully!"
          echo "Application available at: https://melihemre.dev"
